/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/AckermannCurvatureDriveMsg.msg */
#ifndef AMRL_MSGS_MESSAGE_ACKERMANNCURVATUREDRIVEMSG_H
#define AMRL_MSGS_MESSAGE_ACKERMANNCURVATUREDRIVEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace amrl_msgs
{
template <class ContainerAllocator>
struct AckermannCurvatureDriveMsg_ {
  typedef AckermannCurvatureDriveMsg_<ContainerAllocator> Type;

  AckermannCurvatureDriveMsg_()
  : header()
  , velocity(0.0)
  , curvature(0.0)
  {
  }

  AckermannCurvatureDriveMsg_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , velocity(0.0)
  , curvature(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _velocity_type;
  float velocity;

  typedef float _curvature_type;
  float curvature;


  typedef boost::shared_ptr< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct AckermannCurvatureDriveMsg
typedef  ::amrl_msgs::AckermannCurvatureDriveMsg_<std::allocator<void> > AckermannCurvatureDriveMsg;

typedef boost::shared_ptr< ::amrl_msgs::AckermannCurvatureDriveMsg> AckermannCurvatureDriveMsgPtr;
typedef boost::shared_ptr< ::amrl_msgs::AckermannCurvatureDriveMsg const> AckermannCurvatureDriveMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "764639b7371d58605044e46d114f18a9";
  }

  static const char* value(const  ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x764639b7371d5860ULL;
  static const uint64_t static_value2 = 0x5044e46d114f18a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/AckermannCurvatureDriveMsg";
  }

  static const char* value(const  ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header header\n\
\n\
# Linear velocity command [m/s]. Positive values indicate forward motion,\n\
# negative values indicate reverse motion.\n\
float32 velocity\n\
\n\
# Desired curvature (reciprocal of radius of turning) of motion. A curvature\n\
# of 0 indicates an infinite radius of turning, corresponding to linear\n\
# motion. Positive values of curvature indicate turning to the left, negative\n\
# values indicate turning to the right.\n\
float32 curvature\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.velocity);
    stream.next(m.curvature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct AckermannCurvatureDriveMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::AckermannCurvatureDriveMsg_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "curvature: ";
    Printer<float>::stream(s, indent + "  ", v.curvature);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ACKERMANNCURVATUREDRIVEMSG_H

