/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/ElevatorStatus.msg */
#ifndef AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H
#define AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace amrl_msgs
{
template <class ContainerAllocator>
struct ElevatorStatus_ {
  typedef ElevatorStatus_<ContainerAllocator> Type;

  ElevatorStatus_()
  : floor(0)
  , door(0)
  {
  }

  ElevatorStatus_(const ContainerAllocator& _alloc)
  : floor(0)
  , door(0)
  {
  }

  typedef uint8_t _floor_type;
  uint8_t floor;

  typedef uint8_t _door_type;
  uint8_t door;

  enum { DOOR_OPEN = 1 };
  enum { DOOR_CLOSED = 0 };
  enum { DOOR_TRANSITION = 2 };
  enum { FLOOR_TRANSITION = 0 };

  typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct ElevatorStatus
typedef  ::amrl_msgs::ElevatorStatus_<std::allocator<void> > ElevatorStatus;

typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus> ElevatorStatusPtr;
typedef boost::shared_ptr< ::amrl_msgs::ElevatorStatus const> ElevatorStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::ElevatorStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::ElevatorStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "83d512d38050c144daa8ed0de80ab702";
  }

  static const char* value(const  ::amrl_msgs::ElevatorStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x83d512d38050c144ULL;
  static const uint64_t static_value2 = 0xdaa8ed0de80ab702ULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/ElevatorStatus";
  }

  static const char* value(const  ::amrl_msgs::ElevatorStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# define enum for door states\n\
uint8 DOOR_OPEN=1\n\
uint8 DOOR_CLOSED=0\n\
uint8 DOOR_TRANSITION=2\n\
\n\
# define enum for floor states\n\
uint8 FLOOR_TRANSITION=0\n\
\n\
uint8 floor\n\
uint8 door\n\
";
  }

  static const char* value(const  ::amrl_msgs::ElevatorStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.floor);
    stream.next(m.door);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ElevatorStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::ElevatorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::ElevatorStatus_<ContainerAllocator> & v) 
  {
    s << indent << "floor: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.floor);
    s << indent << "door: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ELEVATORSTATUS_H

