/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/RobofleetSubscription.msg */
#ifndef AMRL_MSGS_MESSAGE_ROBOFLEETSUBSCRIPTION_H
#define AMRL_MSGS_MESSAGE_ROBOFLEETSUBSCRIPTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace amrl_msgs
{
template <class ContainerAllocator>
struct RobofleetSubscription_ {
  typedef RobofleetSubscription_<ContainerAllocator> Type;

  RobofleetSubscription_()
  : topic_regex()
  , action(0)
  {
  }

  RobofleetSubscription_(const ContainerAllocator& _alloc)
  : topic_regex(_alloc)
  , action(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_regex_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic_regex;

  typedef uint8_t _action_type;
  uint8_t action;

  enum { ACTION_UNSUBSCRIBE = 0 };
  enum { ACTION_SUBSCRIBE = 1 };

  typedef boost::shared_ptr< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator>  const> ConstPtr;
}; // struct RobofleetSubscription
typedef  ::amrl_msgs::RobofleetSubscription_<std::allocator<void> > RobofleetSubscription;

typedef boost::shared_ptr< ::amrl_msgs::RobofleetSubscription> RobofleetSubscriptionPtr;
typedef boost::shared_ptr< ::amrl_msgs::RobofleetSubscription const> RobofleetSubscriptionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a88ef45bfc4d5549d17f245fd122657e";
  }

  static const char* value(const  ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa88ef45bfc4d5549ULL;
  static const uint64_t static_value2 = 0xd17f245fd122657eULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/RobofleetSubscription";
  }

  static const char* value(const  ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Robofleet subscription for Robofleet 2.0\n\
\n\
uint8 ACTION_UNSUBSCRIBE=0\n\
uint8 ACTION_SUBSCRIBE=1\n\
\n\
# receive messages on any topic that matches this (JavaScript) regex\n\
string topic_regex\n\
\n\
uint8 action\n\
\n\
";
  }

  static const char* value(const  ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topic_regex);
    stream.next(m.action);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RobofleetSubscription_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::RobofleetSubscription_<ContainerAllocator> & v) 
  {
    s << indent << "topic_regex: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic_regex);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ROBOFLEETSUBSCRIPTION_H

