/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/ErrorReport.msg */
#ifndef AMRL_MSGS_MESSAGE_ERRORREPORT_H
#define AMRL_MSGS_MESSAGE_ERRORREPORT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "std_msgs/Header.h"

namespace amrl_msgs
{
template <class ContainerAllocator>
struct ErrorReport_ {
  typedef ErrorReport_<ContainerAllocator> Type;

  ErrorReport_()
  : header()
  , laser_header()
  , severity_level(0)
  , failed_subsystem(0)
  , detailed_error_msg()
  {
  }

  ErrorReport_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , laser_header(_alloc)
  , severity_level(0)
  , failed_subsystem(0)
  , detailed_error_msg(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::std_msgs::Header_<ContainerAllocator>  _laser_header_type;
   ::std_msgs::Header_<ContainerAllocator>  laser_header;

  typedef uint8_t _severity_level_type;
  uint8_t severity_level;

  typedef uint8_t _failed_subsystem_type;
  uint8_t failed_subsystem;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detailed_error_msg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  detailed_error_msg;

  enum { INFO = 0 };
  enum { SUBOPTIMAL = 1 };
  enum { RISKY = 2 };
  enum { CATASTROPHIC = 3 };
  enum { OTHER = 0 };
  enum { LOCALIZATION = 1 };
  enum { NAVIGATION_PERCEPTION = 2 };
  enum { NAVIGATION_LOCAL_PLANNING = 3 };
  enum { NAVIGATION_GLOBAL_PLANNING = 4 };

  typedef boost::shared_ptr< ::amrl_msgs::ErrorReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::ErrorReport_<ContainerAllocator>  const> ConstPtr;
}; // struct ErrorReport
typedef  ::amrl_msgs::ErrorReport_<std::allocator<void> > ErrorReport;

typedef boost::shared_ptr< ::amrl_msgs::ErrorReport> ErrorReportPtr;
typedef boost::shared_ptr< ::amrl_msgs::ErrorReport const> ErrorReportConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::ErrorReport_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::ErrorReport_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::ErrorReport_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::ErrorReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9898087bf4de62612995185ab9cc18ca";
  }

  static const char* value(const  ::amrl_msgs::ErrorReport_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9898087bf4de6261ULL;
  static const uint64_t static_value2 = 0x2995185ab9cc18caULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::ErrorReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/ErrorReport";
  }

  static const char* value(const  ::amrl_msgs::ErrorReport_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::ErrorReport_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header header\n\
\n\
# Header from the laser scan that was received closest to the creation of this report\n\
std_msgs/Header laser_header\n\
\n\
# Severity level enum\n\
uint8 INFO=0 # Information\n\
uint8 SUBOPTIMAL=1 # Suboptimal but safe performance\n\
uint8 RISKY=2 # risky, potentially unsafe (got away with it, but could have been catastrophic)\n\
uint8 CATASTROPHIC=3 # catastrohpic (e.g. hit an obstacle)\n\
\n\
# Subsystem enum\n\
uint8 OTHER=0 # for forward compatibility -- details can be added to the free-text field or a new type can be added if we find there is demand\n\
uint8 LOCALIZATION=1 # robot is mislocalized\n\
uint8 NAVIGATION_PERCEPTION=2 # perception failure, e.g. it mis-classified grass as traversible\n\
uint8 NAVIGATION_LOCAL_PLANNING=3 # problems with local planning\n\
uint8 NAVIGATION_GLOBAL_PLANNING=4 # problems with global planning\n\
\n\
# Should be one of the above severity levels\n\
uint8 severity_level\n\
\n\
# Should be one of the above subsystems\n\
uint8 failed_subsystem\n\
\n\
# Detailed text providing details about the error\n\
string detailed_error_msg\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::amrl_msgs::ErrorReport_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::amrl_msgs::ErrorReport_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::amrl_msgs::ErrorReport_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.laser_header);
    stream.next(m.severity_level);
    stream.next(m.failed_subsystem);
    stream.next(m.detailed_error_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ErrorReport_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::ErrorReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::ErrorReport_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "laser_header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.laser_header);
    s << indent << "severity_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.severity_level);
    s << indent << "failed_subsystem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failed_subsystem);
    s << indent << "detailed_error_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detailed_error_msg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ERRORREPORT_H

