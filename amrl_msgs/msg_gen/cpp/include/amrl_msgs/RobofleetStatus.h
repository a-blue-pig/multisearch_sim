/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/RobofleetStatus.msg */
#ifndef AMRL_MSGS_MESSAGE_ROBOFLEETSTATUS_H
#define AMRL_MSGS_MESSAGE_ROBOFLEETSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace amrl_msgs
{
template <class ContainerAllocator>
struct RobofleetStatus_ {
  typedef RobofleetStatus_<ContainerAllocator> Type;

  RobofleetStatus_()
  : status()
  , is_ok(false)
  , battery_level(0.0)
  , location()
  {
  }

  RobofleetStatus_(const ContainerAllocator& _alloc)
  : status(_alloc)
  , is_ok(false)
  , battery_level(0.0)
  , location(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  status;

  typedef uint8_t _is_ok_type;
  uint8_t is_ok;

  typedef float _battery_level_type;
  float battery_level;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _location_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  location;


  typedef boost::shared_ptr< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::RobofleetStatus_<ContainerAllocator>  const> ConstPtr;
}; // struct RobofleetStatus
typedef  ::amrl_msgs::RobofleetStatus_<std::allocator<void> > RobofleetStatus;

typedef boost::shared_ptr< ::amrl_msgs::RobofleetStatus> RobofleetStatusPtr;
typedef boost::shared_ptr< ::amrl_msgs::RobofleetStatus const> RobofleetStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::RobofleetStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::RobofleetStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "81400e783a84903eb28c9cb65109e4c1";
  }

  static const char* value(const  ::amrl_msgs::RobofleetStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x81400e783a84903eULL;
  static const uint64_t static_value2 = 0xb28c9cb65109e4c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/RobofleetStatus";
  }

  static const char* value(const  ::amrl_msgs::RobofleetStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Robot status report for RoboFleet 2.0 -- WIP\n\
\n\
# human-readable general status\n\
string status\n\
\n\
# is the robot functioning normally?\n\
bool is_ok\n\
\n\
# battery percentage, 0 to 1\n\
float32 battery_level\n\
\n\
# human-readable location; map name, etc.\n\
# For a campus building, this should be \"[BuildingName][Floor]: [coordinates]\" (e.g. \"AHG2: (0, 10, 0)\", \"GDC3: (1.0, 3.0, 3.0)\", etc.)\n\
string location\n\
\n\
";
  }

  static const char* value(const  ::amrl_msgs::RobofleetStatus_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.is_ok);
    stream.next(m.battery_level);
    stream.next(m.location);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct RobofleetStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::RobofleetStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::RobofleetStatus_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "is_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ok);
    s << indent << "battery_level: ";
    Printer<float>::stream(s, indent + "  ", v.battery_level);
    s << indent << "location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.location);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_ROBOFLEETSTATUS_H

