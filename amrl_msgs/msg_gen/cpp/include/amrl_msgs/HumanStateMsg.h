/* Auto-generated by genmsg_cpp for file /home/hcrl-nuc/workspaces/search_ws/src/a1_autonomy/amrl_msgs/msg/HumanStateMsg.msg */
#ifndef AMRL_MSGS_MESSAGE_HUMANSTATEMSG_H
#define AMRL_MSGS_MESSAGE_HUMANSTATEMSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose2D.h"
#include "geometry_msgs/Vector3.h"

namespace amrl_msgs
{
template <class ContainerAllocator>
struct HumanStateMsg_ {
  typedef HumanStateMsg_<ContainerAllocator> Type;

  HumanStateMsg_()
  : pose()
  , translational_velocity()
  , rotational_velocity(0.0)
  , id(0)
  {
  }

  HumanStateMsg_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  , translational_velocity(_alloc)
  , rotational_velocity(0.0)
  , id(0)
  {
  }

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _translational_velocity_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  translational_velocity;

  typedef double _rotational_velocity_type;
  double rotational_velocity;

  typedef int64_t _id_type;
  int64_t id;


  typedef boost::shared_ptr< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::amrl_msgs::HumanStateMsg_<ContainerAllocator>  const> ConstPtr;
}; // struct HumanStateMsg
typedef  ::amrl_msgs::HumanStateMsg_<std::allocator<void> > HumanStateMsg;

typedef boost::shared_ptr< ::amrl_msgs::HumanStateMsg> HumanStateMsgPtr;
typedef boost::shared_ptr< ::amrl_msgs::HumanStateMsg const> HumanStateMsgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::amrl_msgs::HumanStateMsg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace amrl_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::amrl_msgs::HumanStateMsg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "38a0da97ca8e10c5097354dcbe286deb";
  }

  static const char* value(const  ::amrl_msgs::HumanStateMsg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x38a0da97ca8e10c5ULL;
  static const uint64_t static_value2 = 0x097354dcbe286debULL;
};

template<class ContainerAllocator>
struct DataType< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "amrl_msgs/HumanStateMsg";
  }

  static const char* value(const  ::amrl_msgs::HumanStateMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Pose2D pose\n\
geometry_msgs/Vector3 translational_velocity\n\
float64 rotational_velocity\n\
int64 id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# Deprecated\n\
# Please use the full 3D pose.\n\
\n\
# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n\
\n\
# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n\
\n\
\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::amrl_msgs::HumanStateMsg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
    stream.next(m.translational_velocity);
    stream.next(m.rotational_velocity);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct HumanStateMsg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::amrl_msgs::HumanStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::amrl_msgs::HumanStateMsg_<ContainerAllocator> & v) 
  {
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "translational_velocity: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.translational_velocity);
    s << indent << "rotational_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.rotational_velocity);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AMRL_MSGS_MESSAGE_HUMANSTATEMSG_H

